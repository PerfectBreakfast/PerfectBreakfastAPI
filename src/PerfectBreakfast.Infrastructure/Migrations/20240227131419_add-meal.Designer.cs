// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PerfectBreakfast.Infrastructure;

#nullable disable

namespace PerfectBreakfast.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240227131419_add-meal")]
    partial class addmeal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Combo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Combo", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.ComboFood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("FoodId");

                    b.ToTable("ComboFood", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("PartnerId");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.DailyOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateOnly>("BookingDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("MealSubscriptionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MealSubscriptionId");

                    b.ToTable("DailyOrder", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("CommissionRate")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Delivery", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Food", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Meal", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.MealSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("MealId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MealId");

                    b.ToTable("MealSubscription", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.MenuFood", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("FoodId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuFood", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DailyOrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeliveryStaffId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("MealId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("OrderCode")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("WorkerId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DailyOrderId");

                    b.HasIndex("DeliveryStaffId");

                    b.HasIndex("MealId");

                    b.HasIndex("OrderCode")
                        .IsUnique();

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ComboId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ComboId");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Partner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("CommissionRate")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Partner", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.PartnerPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DailyOrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("RemittanceTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SupperAdminId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DailyOrderId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("SupperAdminId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PartnerPayment", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int>("UnitCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.ShippingOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DailyOrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ShipperId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DailyOrderId");

                    b.HasIndex("ShipperId");

                    b.ToTable("ShippingOrder", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Supplier", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.SupplierCommissionRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CommissionRate")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierCommissionRate", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.SupplierFoodAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AmountCooked")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DailyOrderId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("FoodId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ModificationBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("char(36)");

                    b.Property<decimal?>("ReceivedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SupplierCommissionRateId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DailyOrderId");

                    b.HasIndex("FoodId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("SupplierCommissionRateId");

                    b.ToTable("SupplierFoodAssignment", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.SupplyAssignment", b =>
                {
                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("char(36)");

                    b.HasKey("PartnerId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplyAssignment", (string)null);
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeliveryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<Guid?>("PartnerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PartnerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerfectBreakfast.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.ComboFood", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.Combo", "Combo")
                        .WithMany("ComboFoods")
                        .HasForeignKey("ComboId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PerfectBreakfast.Domain.Entities.Food", "Food")
                        .WithMany("ComboFoods")
                        .HasForeignKey("FoodId");

                    b.Navigation("Combo");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Company", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.Delivery", "Delivery")
                        .WithMany("Companies")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Partner", "Partner")
                        .WithMany("Companies")
                        .HasForeignKey("PartnerId");

                    b.Navigation("Delivery");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.DailyOrder", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.Company", null)
                        .WithMany("DailyOrders")
                        .HasForeignKey("CompanyId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.MealSubscription", "MealSubscription")
                        .WithMany("DailyOrders")
                        .HasForeignKey("MealSubscriptionId");

                    b.Navigation("MealSubscription");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Food", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.Category", "Category")
                        .WithMany("Foods")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.MealSubscription", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.Company", "Company")
                        .WithMany("MealSubscriptions")
                        .HasForeignKey("CompanyId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Meal", "Meal")
                        .WithMany("MealSubscriptions")
                        .HasForeignKey("MealId");

                    b.Navigation("Company");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.MenuFood", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.Combo", "Combo")
                        .WithMany("MenuFoods")
                        .HasForeignKey("ComboId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Food", "Food")
                        .WithMany("MenuFoods")
                        .HasForeignKey("FoodId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Menu", "Menu")
                        .WithMany("MenuFoods")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combo");

                    b.Navigation("Food");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Order", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.DailyOrder", "DailyOrder")
                        .WithMany("Orders")
                        .HasForeignKey("DailyOrderId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.User", "DeliveryStaff")
                        .WithMany("OrdersDeliveryStaff")
                        .HasForeignKey("DeliveryStaffId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Meal", "Meal")
                        .WithMany("Orders")
                        .HasForeignKey("MealId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.User", "Worker")
                        .WithMany("OrdersWorker")
                        .HasForeignKey("WorkerId");

                    b.Navigation("DailyOrder");

                    b.Navigation("DeliveryStaff");

                    b.Navigation("Meal");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.Combo", "Combo")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ComboId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Food", "Food")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FoodId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Combo");

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.PartnerPayment", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.DailyOrder", "DailyOrder")
                        .WithMany("PartnerPayments")
                        .HasForeignKey("DailyOrderId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Delivery", "Delivery")
                        .WithMany("PartnerPayments")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Partner", "Partner")
                        .WithMany("PartnerPayments")
                        .HasForeignKey("PartnerId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.User", "SupperAdmin")
                        .WithMany("PartnerPayments")
                        .HasForeignKey("SupperAdminId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Supplier", "Supplier")
                        .WithMany("PartnerPayments")
                        .HasForeignKey("SupplierId");

                    b.Navigation("DailyOrder");

                    b.Navigation("Delivery");

                    b.Navigation("Partner");

                    b.Navigation("SupperAdmin");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.ShippingOrder", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.DailyOrder", "DailyOrder")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("DailyOrderId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.User", "Shipper")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("ShipperId");

                    b.Navigation("DailyOrder");

                    b.Navigation("Shipper");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.SupplierCommissionRate", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.Food", "Food")
                        .WithMany("SupplierCommissionRates")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PerfectBreakfast.Domain.Entities.Supplier", "Supplier")
                        .WithMany("SupplierCommissionRates")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Food");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.SupplierFoodAssignment", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.DailyOrder", "DailyOrder")
                        .WithMany("SupplierFoodAssignments")
                        .HasForeignKey("DailyOrderId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Food", "Food")
                        .WithMany("SupplierFoodAssignments")
                        .HasForeignKey("FoodId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Partner", "Partner")
                        .WithMany("SupplierFoodAssignments")
                        .HasForeignKey("PartnerId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.SupplierCommissionRate", "SupplierCommissionRate")
                        .WithMany("SupplierFoodAssignments")
                        .HasForeignKey("SupplierCommissionRateId");

                    b.Navigation("DailyOrder");

                    b.Navigation("Food");

                    b.Navigation("Partner");

                    b.Navigation("SupplierCommissionRate");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.SupplyAssignment", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.Partner", "Partner")
                        .WithMany("SupplyAssignments")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerfectBreakfast.Domain.Entities.Supplier", "Supplier")
                        .WithMany("SupplyAssignments")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.User", b =>
                {
                    b.HasOne("PerfectBreakfast.Domain.Entities.Company", "Company")
                        .WithMany("Workers")
                        .HasForeignKey("CompanyId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Delivery", "Delivery")
                        .WithMany("Users")
                        .HasForeignKey("DeliveryId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Partner", "Partner")
                        .WithMany("Users")
                        .HasForeignKey("PartnerId");

                    b.HasOne("PerfectBreakfast.Domain.Entities.Supplier", "Supplier")
                        .WithMany("Users")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Company");

                    b.Navigation("Delivery");

                    b.Navigation("Partner");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Category", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Combo", b =>
                {
                    b.Navigation("ComboFoods");

                    b.Navigation("MenuFoods");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Company", b =>
                {
                    b.Navigation("DailyOrders");

                    b.Navigation("MealSubscriptions");

                    b.Navigation("Workers");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.DailyOrder", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PartnerPayments");

                    b.Navigation("ShippingOrders");

                    b.Navigation("SupplierFoodAssignments");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Delivery", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("PartnerPayments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Food", b =>
                {
                    b.Navigation("ComboFoods");

                    b.Navigation("MenuFoods");

                    b.Navigation("OrderDetails");

                    b.Navigation("SupplierCommissionRates");

                    b.Navigation("SupplierFoodAssignments");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Meal", b =>
                {
                    b.Navigation("MealSubscriptions");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.MealSubscription", b =>
                {
                    b.Navigation("DailyOrders");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Menu", b =>
                {
                    b.Navigation("MenuFoods");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Partner", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("PartnerPayments");

                    b.Navigation("SupplierFoodAssignments");

                    b.Navigation("SupplyAssignments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("PartnerPayments");

                    b.Navigation("SupplierCommissionRates");

                    b.Navigation("SupplyAssignments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.SupplierCommissionRate", b =>
                {
                    b.Navigation("SupplierFoodAssignments");
                });

            modelBuilder.Entity("PerfectBreakfast.Domain.Entities.User", b =>
                {
                    b.Navigation("OrdersDeliveryStaff");

                    b.Navigation("OrdersWorker");

                    b.Navigation("PartnerPayments");

                    b.Navigation("ShippingOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
